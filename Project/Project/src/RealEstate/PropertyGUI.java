/*
 * @author Aviendha O Broin
 * code based on  examples from @Frances Sheridan
 */
package RealEstate;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class PropertyGUI extends javax.swing.JFrame {

    private ArrayList<Property> toSavePList;
    private ArrayList<Property> savedPList;
    private String owner;
    private String address;
    private double price;
    private int id;
    private int apartmentNum;

    /**
     * Creates new form PropertiesGUI
     */
    public PropertyGUI() {
        initComponents();
        toSavePList = new ArrayList<>();
        savedPList = new ArrayList<>();
        owner = new String();
        address = new String();
        price = 0.0;
        id = 0;
        apartmentNum = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        titleLbl = new javax.swing.JLabel();
        ownerLbl = new javax.swing.JLabel();
        addressLbl = new javax.swing.JLabel();
        priceLbl = new javax.swing.JLabel();
        ownerTf = new javax.swing.JTextField();
        addressTf = new javax.swing.JTextField();
        priceTf = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        viewSavedBtn = new javax.swing.JButton();
        idLbl = new javax.swing.JLabel();
        idTf = new javax.swing.JTextField();
        apartmentLbl = new javax.swing.JLabel();
        optionalLbl = new javax.swing.JLabel();
        apartmentTf = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLbl.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        titleLbl.setText("Properties");

        ownerLbl.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ownerLbl.setText("Current Owner:");

        addressLbl.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        addressLbl.setText("Address:");

        priceLbl.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        priceLbl.setText("Price:");

        addBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addBtn.setText("Add Property");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        searchBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        searchBtn.setText("Search Saved By ID");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteBtn.setText("Delete Property");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        saveBtn.setText("Save Properties");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        viewSavedBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewSavedBtn.setText("View Saved Properties");
        viewSavedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSavedBtnActionPerformed(evt);
            }
        });

        idLbl.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        idLbl.setText("ID Code:");

        apartmentLbl.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        apartmentLbl.setText("Apartment Num:");

        optionalLbl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        optionalLbl.setForeground(new java.awt.Color(200, 0, 0));
        optionalLbl.setText("Optional");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewSavedBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(optionalLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressLbl)
                            .addComponent(ownerLbl)
                            .addComponent(idLbl)
                            .addComponent(priceLbl)
                            .addComponent(apartmentLbl))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ownerTf, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .addComponent(addressTf)
                            .addComponent(priceTf)
                            .addComponent(idTf)
                            .addComponent(apartmentTf)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(titleLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchBtn)
                        .addGap(10, 10, 10)
                        .addComponent(deleteBtn)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ownerLbl)
                    .addComponent(ownerTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressLbl)
                    .addComponent(addressTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(priceTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apartmentTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(priceLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(idLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(apartmentLbl)
                            .addComponent(optionalLbl))))
                .addGap(27, 27, 27)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(saveBtn)
                    .addComponent(viewSavedBtn))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn)
                    .addComponent(searchBtn))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //recieve text from textfields

        boolean idDuplicate = false;

        //checks if required fields all have text before proceeding
        if (ownerTf.getText().equals("") || addressTf.getText().equals("") || priceTf.getText().equals("") || idTf.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "You must enter owner, address, price and ID code to add a property");
        }
        //stores user entered value to variables to pass to constructor
        owner = ownerTf.getText();
        address = addressTf.getText();
        price = Double.parseDouble(priceTf.getText());
        id = Integer.parseInt(idTf.getText());
        apartmentNum = Integer.parseInt(apartmentTf.getText());

        //reads properties already saved to file to check if a property is already added with the same ID Code
        File inFile;
        FileInputStream fInStream;
        ObjectInputStream oInStream;

        try {
            inFile = new File("propertyList.dat");
            fInStream = new FileInputStream(inFile);
            oInStream = new ObjectInputStream(fInStream);

            savedPList = (ArrayList<Property>) oInStream.readObject();   //reads properties saved to file into savedList

            for (int i = 0; i < savedPList.size(); i++) {      //iterates through saved properties
                if (savedPList.get(i).getId() == id) {    //searches for the ID Code and wanrs user that ID Code already exists
                    JOptionPane.showMessageDialog(null, "A property with that ID Code already exists");
                    idDuplicate = true;
                }
            }

            oInStream.close();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Problem viewing saved properties " + e);
        }

        if (idDuplicate != true) {
            //create property or apartment containing text from textfields
            if (apartmentTf.getText().equals("")) {   //checks if the optional textfield is filled which would create an apartment instead of a property
                Property a = new Property(owner, address, price, id);
                toSavePList.add(a);
            } else {
                Property a = new Apartment(owner, address, price, id, apartmentNum);
                toSavePList.add(a);
            }

            JOptionPane.showMessageDialog(null, "Property ready to save");
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        //search for saved entires based on ID Code
        int searchId = Integer.parseInt(JOptionPane.showInputDialog(null, "Please enter the ID Code you wish to search for"));
        boolean idFound = false;

        //reads object data from file to allow searching of that data
        File inFile;
        FileInputStream fStream;
        ObjectInputStream oStream;

        try {
            inFile = new File("propertyList.dat");
            fStream = new FileInputStream(inFile);
            oStream = new ObjectInputStream(fStream);

            ArrayList<Property> xList = (ArrayList<Property>) oStream.readObject(); //temporary arraylist to show properties in file
            for (Property x : xList) {
                if (searchId == x.getId()) {  //searches for the ID Code and displays that property
                    JOptionPane.showMessageDialog(null, " Owner: " + x.getOwner() + "\n Address: " + x.getAddress() + "\n Price: €" + x.getPrice() + "\n ID Code: " + x.getId());
                    idFound = true;
                }
            }
            if (idFound == false) {
                JOptionPane.showMessageDialog(null, "Property not found");
            }
            oStream.close();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Problem viewing properties " + e);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        //deletes a property from file based off of ID Code
        int deleteId = Integer.parseInt(JOptionPane.showInputDialog(null, "Please enter the ID Code you wish to search for"));
        boolean idFound = false;

        //reads object data from file to allow searching for property to delete
        File inFile;
        FileInputStream fStream;
        ObjectInputStream oStream;

        try {
            inFile = new File("propertyList.dat");
            fStream = new FileInputStream(inFile);
            oStream = new ObjectInputStream(fStream);

            savedPList = (ArrayList<Property>) oStream.readObject();      //reads properties saved to file
            if (savedPList.isEmpty()) {    //checks if the file is empty
                JOptionPane.showMessageDialog(null, "Sorry, there are no items to delete at this time");
            }
            for (int i = 0; i < savedPList.size(); i++) {      //iterates through saved properties
                if (savedPList.get(i).getId() == deleteId) {  //searches for the ID Code and delete the property if match found
                    savedPList.remove(i);
                    idFound = true;
                }
            }

            if (idFound == false) {
                JOptionPane.showMessageDialog(null, "Property not found");
            }
            oStream.close();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Problem viewing saved properties " + e);
        }

        //saves the arraylist with the property removed back to the file
        if (idFound == true) {
            File outFile;
            FileOutputStream fOutStream;
            ObjectOutputStream oOutStream;

            try {
                outFile = new File("propertyList.dat");
                fOutStream = new FileOutputStream(outFile);
                oOutStream = new ObjectOutputStream(fOutStream);

                oOutStream.writeObject(savedPList);      //saves the objects minus the removed property back to file

                JOptionPane.showMessageDialog(null, "Property deleted successfully");

                oOutStream.close();
            } catch (IOException e) {
                System.out.println("Problem deleting properties " + e);
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        //saves properties to file  

        //reads properties already saved to file that will be appended to
        File inFile;
        FileInputStream fInStream;
        ObjectInputStream oInStream;

        try {
            inFile = new File("propertyList.dat");
            fInStream = new FileInputStream(inFile);
            oInStream = new ObjectInputStream(fInStream);

            savedPList = (ArrayList<Property>) oInStream.readObject();   //reads properties saved to file into savedList
            savedPList.addAll(toSavePList);       //adds the properties to be saved to the existing saved properties

            oInStream.close();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Problem viewing saved properties " + e);
        }

        //saves the new properties to file
        File outFile;
        FileOutputStream fOutStream;
        ObjectOutputStream oOutStream;

        try {
            outFile = new File("propertyList.dat");
            fOutStream = new FileOutputStream(outFile);
            oOutStream = new ObjectOutputStream(fOutStream);

            oOutStream.writeObject(savedPList);      //writes the previously saved and newly saved properties to file

            toSavePList.clear();     //removes properties from the toSaveList arrayList as these have now been saved to file

            JOptionPane.showMessageDialog(null, "Properties saved to file successfully");

            oOutStream.close();
        } catch (IOException e) {
            System.out.println("Problem saving properties " + e);
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void viewSavedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSavedBtnActionPerformed
        //view properties saved to file
        File inFile;
        FileInputStream fStream;
        ObjectInputStream oStream;

        try {
            inFile = new File("propertyList.dat");
            fStream = new FileInputStream(inFile);
            oStream = new ObjectInputStream(fStream);

            ArrayList<Property> xList = (ArrayList<Property>) oStream.readObject(); //temporary arraylist to show properties in file

            for (Property x : xList) { //iterates through saved properties and apartments
                if (x instanceof Apartment) { //checks if an object is a super or sub class and displays the ddetails appropriate for that object
                    JOptionPane.showMessageDialog(null, " Owner: " + x.getOwner() + "\n Address: " + x.getAddress() + "\n Price: €" + x.getPrice() + "\n ID Code: " + x.getId() + "\n Apartment Num: " + ((Apartment) x).getApartmentNum());
                } else {
                    JOptionPane.showMessageDialog(null, " Owner: " + x.getOwner() + "\n Address: " + x.getAddress() + "\n Price: €" + x.getPrice() + "\n ID Code: " + x.getId());
                }
            }

            oStream.close();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Problem viewing saved properties " + e);
        }
    }//GEN-LAST:event_viewSavedBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PropertyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PropertyGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel addressLbl;
    private javax.swing.JTextField addressTf;
    private javax.swing.JLabel apartmentLbl;
    private javax.swing.JTextField apartmentTf;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel idLbl;
    private javax.swing.JTextField idTf;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel optionalLbl;
    private javax.swing.JLabel ownerLbl;
    private javax.swing.JTextField ownerTf;
    private javax.swing.JLabel priceLbl;
    private javax.swing.JTextField priceTf;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JButton viewSavedBtn;
    // End of variables declaration//GEN-END:variables
}
